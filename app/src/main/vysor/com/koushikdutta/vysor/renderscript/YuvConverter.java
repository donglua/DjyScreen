// 
// Decompiled by Procyon v0.5.30
// 

package com.koushikdutta.vysor.renderscript;

import android.renderscript.Type$Builder;
import android.renderscript.Allocation;
import android.renderscript.Allocation$MipmapControl;
import java.util.Arrays;
import java.io.OutputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import android.graphics.Rect;
import android.graphics.Canvas;
import android.graphics.Bitmap$Config;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Xfermode;
import android.graphics.PorterDuffXfermode;
import android.graphics.PorterDuff$Mode;
import android.graphics.Paint;
import android.graphics.ColorMatrix;
import android.graphics.Bitmap;
import com.koushikdutta.async.util.StreamUtility;
import android.renderscript.Element;
import android.renderscript.Short4;
import android.renderscript.Matrix4f;
import android.renderscript.RenderScript$ContextType;
import android.os.Build$VERSION;
import android.renderscript.RenderScript;
import java.lang.reflect.Method;
import android.content.Context;

public class YuvConverter
{
    public static String TMP;
    static final byte[][] byteCodes;
    public static Context context;
    static final Method create;
    private static int[] resources;
    static final byte[] uchar4to1;
    static final byte[] uchar4to2;
    static final byte[] uchar4to3;
    static final byte[] uchar4to4;
    RenderScript rs;
    ScriptC_uchar4ToX s;
    byte[] temp;
    
    static {
        while (true) {
            while (true) {
                Label_38031: {
                    try {
                        if (Build$VERSION.SDK_INT >= 18) {
                            if (Build$VERSION.SDK_INT >= 21) {
                                break Label_38031;
                            }
                            create = RenderScript.class.getDeclaredMethod("create", Context.class, Integer.TYPE, RenderScript$ContextType.class);
                        }
                        else {
                            create = RenderScript.class.getDeclaredMethod("create", Context.class, Integer.TYPE);
                        }
                        YuvConverter.create.setAccessible(true);
                        YuvConverter.resources = new int[] { 2131165184, 2131165185, 2131165186, 2131165187 };
                        uchar4to1 = new byte[] { -34, -64, 23, 11, 0, 0, 0, 0, 44, 0, 0, 0, 4, 5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 64, 4, 0, 109, 7, 0, 0, 2, 64, 4, 0, 3, 0, 0, 0, 66, 67, -64, -34, 33, 12, 0, 0, 62, 1, 0, 0, 1, 16, 0, 0, 18, 0, 0, 0, 7, -127, 35, -111, 65, -56, 4, 73, 6, 16, 50, 57, -110, 1, -124, 12, 37, 5, 8, 25, 30, 4, -117, 98, -128, 20, 69, 2, 66, -110, 11, 66, -92, 16, 50, 20, 56, 8, 24, 73, 10, 50, 68, 36, 72, 10, -112, 33, 35, -60, 82, -128, 12, 25, 33, 114, 36, 7, -56, 72, 17, 98, -88, -96, -88, 64, -58, -16, 1, 0, 0, 0, 73, 24, 0, 0, 11, 0, 0, 0, 11, -112, 0, 4, 65, 16, 4, 9, 1, 4, 65, 16, 4, -119, 1, 4, 65, 16, 4, -119, -1, -1, -1, -1, 31, -64, 96, -127, -16, -1, -1, -1, -1, 3, -80, 64, -8, -1, -1, -1, -1, 1, 12, 0, -119, 32, 0, 0, 22, 0, 0, 0, 50, 34, 72, 9, 32, 100, -123, 4, -109, 34, -92, -124, 4, -109, 34, -29, -124, -95, -112, 20, 18, 76, -118, -116, 11, -124, -92, 76, 16, 68, 51, 0, 9, 1, 110, -110, -90, -120, 18, 38, 63, -110, 126, 6, -104, 34, -28, -62, 47, 28, 5, -127, -60, 28, 1, 50, -116, 64, 16, 84, 70, 0, -120, -52, 17, -128, 65, 49, -114, 65, 40, 37, 82, -61, 8, 4, 80, 6, 54, 24, -75, -127, -128, 57, 2, 80, 0, 0, 19, -80, 112, -112, -121, 118, -80, -121, 59, 104, 3, 119, 120, 7, 119, 40, -121, 54, 96, -121, 116, 112, -121, 122, -64, -121, 54, 56, 7, 119, -88, -121, 114, 8, 7, 113, 72, -121, 13, 100, 80, 14, 109, 0, 15, 122, 48, 7, 114, -96, 7, 115, 32, 7, 109, -112, 14, 118, 64, 7, 122, 96, 7, 116, -48, 6, -10, 16, 7, 114, -128, 7, 122, 96, 7, 116, -96, 7, 113, 32, 7, 120, -48, 6, -18, 48, 7, 114, -48, 6, -77, 96, 7, 116, -96, -13, 64, -122, 4, 50, 66, 68, 4, -32, 36, 56, -51, -64, -121, 40, 11, 0, 0, 1, 0, 0, 0, 48, 68, 113, -128, 0, 16, 0, 0, 0, -128, 44, 16, 0, 0, 0, 8, 0, 0, 0, 50, 30, -104, 16, 25, 17, 76, -112, -116, 9, 38, 71, -58, 4, 67, -126, 35, 0, 84, 70, 0, 40, -107, 64, 33, -112, 24, 1, 0, 0, 0, 0, 121, 24, 0, 0, -126, 0, 0, 0, 67, -116, -60, 120, -126, -28, 88, -96, -36, -61, 56, -96, 67, 56, -56, -61, 47, -52, 67, 58, -24, 67, 57, 12, 49, 18, -29, 25, -110, 99, 65, -45, 14, -23, -32, 14, -65, 80, 14, -18, 80, 15, -19, -16, 11, -13, -112, 14, -6, 80, 14, 67, -124, -89, 88, 32, -115, 3, 59, -124, -125, 59, -100, 3, 24, -40, 67, 57, -56, -61, 60, -92, -61, 59, -72, 3, 24, -52, -127, 27, -44, 1, 24, 12, 33, -98, -29, 65, 22, 28, -10, 80, 14, -14, 48, 15, -23, -16, 14, -18, -80, 32, -120, -125, 33, -60, -93, 60, -53, -126, 72, 29, -62, -63, 30, -62, -31, 23, -32, 33, 28, -58, 97, 29, -62, -31, 28, -54, -31, 23, -36, 33, 28, -38, -95, 28, 22, 88, -29, -16, 14, -19, -32, 6, -21, -16, 14, -11, 48, 15, -24, -112, 14, -21, 64, 14, -11, 64, 15, -12, 16, 14, 110, 96, 15, -7, 48, 15, -17, 32, 15, 67, -120, -89, 121, -100, 5, -48, 57, -48, -126, 60, -124, -125, 59, -52, -125, 57, -68, -125, 60, -76, 67, 43, -124, 3, 61, -56, 67, 58, -32, -61, 2, 33, 14, -18, 96, 8, -15, 64, 79, -76, 64, 57, 7, 90, -112, -121, 112, 112, -121, 121, 96, -121, 112, -96, -121, 114, 88, 96, -44, -61, 56, -96, 67, 56, -56, 3, 29, 12, 17, -98, 105, 1, 33, 15, -17, -16, 14, -12, 48, 68, 120, -86, 5, -62, 28, -60, -63, 16, -29, -71, -98, 11, 34, -122, 24, 15, -10, 100, 16, -79, -32, 121, -121, 118, 112, -121, 116, -128, -121, 119, -96, -121, 114, 112, 7, 122, 0, -125, 113, 64, -121, 112, -112, -121, 33, -62, -93, 45, -120, 102, 33, 29, -38, 1, 30, -40, -95, 28, -64, 96, 20, -34, 96, 20, -42, 96, 13, -64, -128, 22, 68, 33, 20, 66, 97, 68, -60, 14, -20, 96, 15, -19, -32, 6, -19, -16, 14, -28, 80, 15, -20, 80, 14, 110, 96, 14, -20, 16, 14, -25, 48, 15, 83, 4, 64, 24, -95, -80, 3, 59, -40, 67, 59, -72, 65, 58, -112, 67, 57, -72, 3, 61, 76, 9, -120, 17, -57, 24, -64, -125, 60, -124, -61, 57, -76, 67, 56, 76, 17, -116, 100, -124, 51, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -10, 16, 14, -14, 48, 69, 96, -98, 17, -48, 24, -56, -61, 60, -4, -62, 59, -120, -125, 58, -108, -61, 56, -48, -61, 47, -52, 3, 59, -68, 3, 61, -52, -61, 20, 96, -60, 53, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -26, -16, 14, -14, 80, 14, -31, 48, 14, -24, -16, 11, -18, 16, 14, -19, 80, 14, 83, 2, 105, -124, 52, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -26, -16, 14, -14, 80, 14, -31, 48, 14, -24, 48, 37, -96, 0, 0, 0, 121, 24, 0, 0, 23, 0, 0, 0, 51, 8, -128, 28, -60, -31, 28, 102, 20, 1, 61, -120, 67, 56, -124, -61, -116, 66, -128, 7, 121, 120, 7, 115, -104, 113, 12, -26, 0, 15, -19, 16, 14, -12, -128, 14, 51, 12, 66, 30, -62, -63, 29, -50, -95, 28, 102, 48, 5, 61, -120, 67, 56, -124, -125, 27, -52, 3, 61, -56, 67, 61, -116, 3, 61, -52, 120, -116, 116, 112, 7, 123, 8, 7, 121, 72, -121, 112, 112, 7, 122, 112, 3, 118, 120, -121, 112, 32, 7, 0, 0, 0, 113, 32, 0, 0, 16, 0, 0, 0, 38, 64, 68, -114, 51, -39, 64, 26, -4, 115, -83, 71, -110, 9, 76, 17, 114, -103, -44, 50, 33, -49, -126, -91, 100, 109, 71, -46, -49, 0, 83, -124, 92, -8, -123, 119, 21, -2, 23, 22, -96, 24, 109, 4, 52, -46, 2, 76, -124, 1, 64, 70, 27, 1, -115, 84, 56, 17, 99, 2, 83, -124, 92, 0, 97, 32, 0, 0, 41, 0, 0, 0, 19, 4, 65, 44, 16, 0, 0, 0, 3, 0, 0, 0, -108, 70, 0, -118, -96, 12, -120, -51, 0, 0, 0, 0, -108, -116, 49, 4, -55, -71, 9, -44, 28, 67, 68, 57, 99, 8, -110, 113, 22, -88, 57, -122, -22, 50, -58, 16, -92, -25, 50, 80, 115, 12, -104, -10, -116, 33, 72, -48, 113, -96, -26, 24, -74, 14, 26, 49, 40, -122, 96, 0, -68, 49, -124, -49, 57, 48, 32, 67, -63, 24, 67, 16, 3, -89, -62, 96, 12, 96, 48, 66, 33, -125, 0, -64, 112, 32, 0, 0, 8, 0, 0, 0, -74, 112, 80, 82, -44, 1, 19, 96, 12, -63, 101, 13, 1, 102, 35, -124, 31, 29, -110, 37, 16, -43, -113, 52, -90, 80, 84, -65, 67, 77, 0, 0, 1, 49, 0, 0, 4, 0, 0, 0, 91, 6, 32, -80, -74, 12, 80, 96, 109, 25, -90, -64, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                        uchar4to2 = new byte[] { -34, -64, 23, 11, 0, 0, 0, 0, 44, 0, 0, 0, 40, 5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 64, 4, 0, 109, 7, 0, 0, 2, 64, 4, 0, 3, 0, 0, 0, 66, 67, -64, -34, 33, 12, 0, 0, 71, 1, 0, 0, 1, 16, 0, 0, 18, 0, 0, 0, 7, -127, 35, -111, 65, -56, 4, 73, 6, 16, 50, 57, -110, 1, -124, 12, 37, 5, 8, 25, 30, 4, -117, 98, -128, 20, 69, 2, 66, -110, 11, 66, -92, 16, 50, 20, 56, 8, 24, 73, 10, 50, 68, 36, 72, 10, -112, 33, 35, -60, 82, -128, 12, 25, 33, 114, 36, 7, -56, 72, 17, 98, -88, -96, -88, 64, -58, -16, 1, 0, 0, 0, 73, 24, 0, 0, 11, 0, 0, 0, 11, -112, 0, 4, 65, 16, 4, 9, 1, 4, 65, 16, 4, -119, 1, 4, 65, 16, 4, -119, -1, -1, -1, -1, 31, -64, 96, -127, -16, -1, -1, -1, -1, 3, -80, 64, -8, -1, -1, -1, -1, 1, 12, 0, -119, 32, 0, 0, 25, 0, 0, 0, 50, 34, 72, 9, 32, 100, -123, 4, -109, 34, -92, -124, 4, -109, 34, -29, -124, -95, -112, 20, 18, 76, -118, -116, 11, -124, -92, 76, 16, 80, 51, 0, 9, 1, -82, -110, -90, -120, 18, 38, 63, -110, 126, 6, -104, 34, -28, -62, 47, -36, -89, 81, 16, 72, -52, 17, 32, -61, 8, 4, 65, 101, 4, 96, 24, 65, 32, 8, 17, -103, 35, 0, -125, 98, 28, -109, -44, 90, -60, -122, 17, 8, -96, 12, 110, 56, 122, 3, 1, 115, 4, -96, 48, -116, 32, 44, 0, 0, 0, 0, 19, -80, 112, -112, -121, 118, -80, -121, 59, 104, 3, 119, 120, 7, 119, 40, -121, 54, 96, -121, 116, 112, -121, 122, -64, -121, 54, 56, 7, 119, -88, -121, 114, 8, 7, 113, 72, -121, 13, 100, 80, 14, 109, 0, 15, 122, 48, 7, 114, -96, 7, 115, 32, 7, 109, -112, 14, 118, 64, 7, 122, 96, 7, 116, -48, 6, -10, 16, 7, 114, -128, 7, 122, 96, 7, 116, -96, 7, 113, 32, 7, 120, -48, 6, -18, 48, 7, 114, -48, 6, -77, 96, 7, 116, -96, -13, 64, -122, 4, 50, 66, 68, 4, -32, 36, 56, -51, -64, -121, 40, 13, 0, 0, 1, 0, 0, 0, 48, 68, -127, -128, 0, 16, 0, 0, 0, -128, 44, 16, 0, 0, 0, 8, 0, 0, 0, 50, 30, -104, 16, 25, 17, 76, -112, -116, 9, 38, 71, -58, 4, 67, -110, 35, 0, 84, 70, 0, 104, -107, 64, 33, -112, 24, 1, 0, 0, 0, 0, 121, 24, 0, 0, -126, 0, 0, 0, 67, -116, -59, -120, -126, -27, 88, -96, -36, -61, 56, -96, 67, 56, -56, -61, 47, -52, 67, 58, -24, 67, 57, 12, 49, 22, 35, 26, -106, 99, 65, -45, 14, -23, -32, 14, -65, 80, 14, -18, 80, 15, -19, -16, 11, -13, -112, 14, -6, 80, 14, 67, -124, -88, 88, 32, -115, 3, 59, -124, -125, 59, -100, 3, 24, -40, 67, 57, -56, -61, 60, -92, -61, 59, -72, 3, 24, -52, -127, 27, -44, 1, 24, 12, 33, -94, 35, 66, 22, 28, -10, 80, 14, -14, 48, 15, -23, -16, 14, -18, -80, 32, -120, -125, 33, 68, -92, 68, -53, -126, 72, 29, -62, -63, 30, -62, -31, 23, -32, 33, 28, -58, 97, 29, -62, -31, 28, -54, -31, 23, -36, 33, 28, -38, -95, 28, 22, 88, -29, -16, 14, -19, -32, 6, -21, -16, 14, -11, 48, 15, -24, -112, 14, -21, 64, 14, -11, 64, 15, -12, 16, 14, 110, 96, 15, -7, 48, 15, -17, 32, 15, 67, -120, -88, -119, -100, 5, -48, 57, -48, -126, 60, -124, -125, 59, -52, -125, 57, -68, -125, 60, -76, 67, 43, -124, 3, 61, -56, 67, 58, -32, -61, 2, 33, 14, -18, 96, 8, 17, 65, 81, -76, 64, 57, 7, 90, -112, -121, 112, 112, -121, 121, 96, -121, 112, -96, -121, 114, 88, 96, -44, -61, 56, -96, 67, 56, -56, 3, 29, 12, 17, -94, 105, 1, 33, 15, -17, -16, 14, -12, 48, 68, -120, -86, 5, -62, 28, -60, -63, 16, 35, -70, -94, 75, 34, -122, 24, 17, 22, 101, 18, -79, -32, 121, -121, 118, 112, -121, 116, -128, -121, 119, -96, -121, 114, 112, 7, 122, 0, -125, 113, 64, -121, 112, -112, -121, 33, 66, -92, 45, -120, 102, 33, 29, -38, 1, 30, -40, -95, 28, -64, 96, 20, -34, 96, 20, -42, 96, 13, -64, -128, 22, 68, 33, 20, 66, 97, 68, -60, 14, -20, 96, 15, -19, -32, 6, -19, -16, 14, -28, 80, 15, -20, 80, 14, 110, 96, 14, -20, 16, 14, -25, 48, 15, 83, 4, 64, 24, -95, -80, 3, 59, -40, 67, 59, -72, 65, 58, -112, 67, 57, -72, 3, 61, 76, 9, -120, 17, -57, 24, -64, -125, 60, -124, -61, 57, -76, 67, 56, 76, 17, -116, 100, -124, 51, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -10, 16, 14, -14, 48, 69, 96, -98, 17, -48, 24, -56, -61, 60, -4, -62, 59, -120, -125, 58, -108, -61, 56, -48, -61, 47, -52, 3, 59, -68, 3, 61, -52, -61, 20, 96, -60, 53, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -26, -16, 14, -14, 80, 14, -31, 48, 14, -24, -16, 11, -18, 16, 14, -19, 80, 14, 83, 2, 105, -124, 52, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -26, -16, 14, -14, 80, 14, -31, 48, 14, -24, 48, 37, -96, 0, 0, 0, 121, 24, 0, 0, 23, 0, 0, 0, 51, 8, -128, 28, -60, -31, 28, 102, 20, 1, 61, -120, 67, 56, -124, -61, -116, 66, -128, 7, 121, 120, 7, 115, -104, 113, 12, -26, 0, 15, -19, 16, 14, -12, -128, 14, 51, 12, 66, 30, -62, -63, 29, -50, -95, 28, 102, 48, 5, 61, -120, 67, 56, -124, -125, 27, -52, 3, 61, -56, 67, 61, -116, 3, 61, -52, 120, -116, 116, 112, 7, 123, 8, 7, 121, 72, -121, 112, 112, 7, 122, 112, 3, 118, 120, -121, 112, 32, 7, 0, 0, 0, 113, 32, 0, 0, 16, 0, 0, 0, 38, 64, 68, -114, 51, -39, 64, 26, -4, 115, -83, 71, -110, 9, 76, 17, 114, -103, -44, 50, 33, -49, -126, -91, 100, 109, 71, -46, -49, 0, 83, -124, 92, -8, -123, 119, 21, -2, 23, 22, -96, 24, 109, 4, 52, -46, 2, 76, -124, 1, 64, 70, 27, 1, -115, 84, 56, 17, 99, 2, 83, -124, 92, 0, 97, 32, 0, 0, 47, 0, 0, 0, 19, 4, 65, 44, 16, 0, 0, 0, 5, 0, 0, 0, 84, 102, 0, 104, -115, 0, 20, 65, 25, -48, 28, 75, 0, 2, 114, 51, 0, 0, 0, 0, -108, -116, 49, 4, -22, -71, 10, -44, 28, -61, 100, 61, 99, 8, -108, 113, 24, -88, 57, -122, 43, 51, -58, 16, 40, -24, 54, 80, 115, 12, 26, 7, -115, 33, 80, -47, 121, -96, -26, 24, -70, 47, 26, 49, 40, -122, 96, 0, -64, 96, 12, 33, 12, -98, 19, 3, 50, 115, 12, -50, 24, 60, 99, 8, 97, 96, 92, 25, -112, -103, 99, 32, 3, 51, 48, 40, 24, 117, 6, 104, 0, -125, 12, 105, -32, 72, -125, 17, -118, 26, 8, 0, -122, 3, 1, 0, 7, 0, 0, 0, -74, 112, 80, 82, -44, 1, 19, 96, 12, -63, 101, 13, 1, 102, 9, 68, -11, 35, -115, 41, 20, -43, -17, 80, 19, 0, 0, 0, 1, 49, 0, 0, 4, 0, 0, 0, 91, 6, 32, -80, -74, 12, 84, 96, 109, 25, -82, -64, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                        uchar4to3 = new byte[] { -34, -64, 23, 11, 0, 0, 0, 0, 44, 0, 0, 0, 76, 5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 64, 4, 0, 109, 7, 0, 0, 2, 64, 4, 0, 3, 0, 0, 0, 66, 67, -64, -34, 33, 12, 0, 0, 80, 1, 0, 0, 1, 16, 0, 0, 18, 0, 0, 0, 7, -127, 35, -111, 65, -56, 4, 73, 6, 16, 50, 57, -110, 1, -124, 12, 37, 5, 8, 25, 30, 4, -117, 98, -128, 20, 69, 2, 66, -110, 11, 66, -92, 16, 50, 20, 56, 8, 24, 73, 10, 50, 68, 36, 72, 10, -112, 33, 35, -60, 82, -128, 12, 25, 33, 114, 36, 7, -56, 72, 17, 98, -88, -96, -88, 64, -58, -16, 1, 0, 0, 0, 73, 24, 0, 0, 11, 0, 0, 0, 11, -112, 0, 4, 65, 16, 4, 9, 1, 4, 65, 16, 4, -119, 1, 4, 65, 16, 4, -119, -1, -1, -1, -1, 31, -64, 96, -127, -16, -1, -1, -1, -1, 3, -80, 64, -8, -1, -1, -1, -1, 1, 12, 0, -119, 32, 0, 0, 25, 0, 0, 0, 50, 34, 72, 9, 32, 100, -123, 4, -109, 34, -92, -124, 4, -109, 34, -29, -124, -95, -112, 20, 18, 76, -118, -116, 11, -124, -92, 76, 16, 84, 51, 0, 9, 1, -82, -110, -90, -120, 18, 38, 63, -110, 126, 6, -104, 34, -28, -62, 47, -36, -81, 81, 16, 72, -52, 17, 32, -61, 8, 4, 65, 101, 4, 96, 24, 97, 32, 8, 17, -103, 35, 0, -125, 98, 28, -109, -44, 90, -60, -122, 17, 8, -96, 12, 110, 56, 122, 3, 1, 115, 4, -96, 48, -116, 48, 44, -61, 8, -60, 2, 19, -80, 112, -112, -121, 118, -80, -121, 59, 104, 3, 119, 120, 7, 119, 40, -121, 54, 96, -121, 116, 112, -121, 122, -64, -121, 54, 56, 7, 119, -88, -121, 114, 8, 7, 113, 72, -121, 13, 100, 80, 14, 109, 0, 15, 122, 48, 7, 114, -96, 7, 115, 32, 7, 109, -112, 14, 118, 64, 7, 122, 96, 7, 116, -48, 6, -10, 16, 7, 114, -128, 7, 122, 96, 7, 116, -96, 7, 113, 32, 7, 120, -48, 6, -18, 48, 7, 114, -48, 6, -77, 96, 7, 116, -96, -13, 64, -122, 4, 50, 66, 68, 4, -32, 36, 56, -51, -64, -121, 40, 13, 0, 0, 1, 0, 0, 0, 48, 68, -127, -128, 0, 16, 0, 0, 0, -128, 44, 16, 0, 0, 0, 8, 0, 0, 0, 50, 30, -104, 16, 25, 17, 76, -112, -116, 9, 38, 71, -58, 4, 67, -110, 35, 0, 84, 70, 0, 104, -107, 64, 33, -112, 24, 1, 0, 0, 0, 0, 121, 24, 0, 0, -126, 0, 0, 0, 67, -116, -59, -120, -126, -27, 88, -96, -36, -61, 56, -96, 67, 56, -56, -61, 47, -52, 67, 58, -24, 67, 57, 12, 49, 22, 35, 26, -106, 99, 65, -45, 14, -23, -32, 14, -65, 80, 14, -18, 80, 15, -19, -16, 11, -13, -112, 14, -6, 80, 14, 67, -124, -88, 88, 32, -115, 3, 59, -124, -125, 59, -100, 3, 24, -40, 67, 57, -56, -61, 60, -92, -61, 59, -72, 3, 24, -52, -127, 27, -44, 1, 24, 12, 33, -94, 35, 66, 22, 28, -10, 80, 14, -14, 48, 15, -23, -16, 14, -18, -80, 32, -120, -125, 33, 68, -92, 68, -53, -126, 72, 29, -62, -63, 30, -62, -31, 23, -32, 33, 28, -58, 97, 29, -62, -31, 28, -54, -31, 23, -36, 33, 28, -38, -95, 28, 22, 88, -29, -16, 14, -19, -32, 6, -21, -16, 14, -11, 48, 15, -24, -112, 14, -21, 64, 14, -11, 64, 15, -12, 16, 14, 110, 96, 15, -7, 48, 15, -17, 32, 15, 67, -120, -88, -119, -100, 5, -48, 57, -48, -126, 60, -124, -125, 59, -52, -125, 57, -68, -125, 60, -76, 67, 43, -124, 3, 61, -56, 67, 58, -32, -61, 2, 33, 14, -18, 96, 8, 17, 65, 81, -76, 64, 57, 7, 90, -112, -121, 112, 112, -121, 121, 96, -121, 112, -96, -121, 114, 88, 96, -44, -61, 56, -96, 67, 56, -56, 3, 29, 12, 17, -94, 105, 1, 33, 15, -17, -16, 14, -12, 48, 68, -120, -86, 5, -62, 28, -60, -63, 16, 35, -70, -94, 75, 34, -122, 24, 17, 22, 101, 18, -79, -32, 121, -121, 118, 112, -121, 116, -128, -121, 119, -96, -121, 114, 112, 7, 122, 0, -125, 113, 64, -121, 112, -112, -121, 33, 66, -92, 45, -120, 102, 33, 29, -38, 1, 30, -40, -95, 28, -64, 96, 20, -34, 96, 20, -42, 96, 13, -64, -128, 22, 68, 33, 20, 66, 97, 68, -60, 14, -20, 96, 15, -19, -32, 6, -19, -16, 14, -28, 80, 15, -20, 80, 14, 110, 96, 14, -20, 16, 14, -25, 48, 15, 83, 4, 64, 24, -95, -80, 3, 59, -40, 67, 59, -72, 65, 58, -112, 67, 57, -72, 3, 61, 76, 9, -120, 17, -57, 24, -64, -125, 60, -124, -61, 57, -76, 67, 56, 76, 17, -116, 100, -124, 51, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -10, 16, 14, -14, 48, 69, 96, -98, 17, -48, 24, -56, -61, 60, -4, -62, 59, -120, -125, 58, -108, -61, 56, -48, -61, 47, -52, 3, 59, -68, 3, 61, -52, -61, 20, 96, -60, 53, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -26, -16, 14, -14, 80, 14, -31, 48, 14, -24, -16, 11, -18, 16, 14, -19, 80, 14, 83, 2, 105, -124, 52, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -26, -16, 14, -14, 80, 14, -31, 48, 14, -24, 48, 37, -96, 0, 0, 0, 121, 24, 0, 0, 23, 0, 0, 0, 51, 8, -128, 28, -60, -31, 28, 102, 20, 1, 61, -120, 67, 56, -124, -61, -116, 66, -128, 7, 121, 120, 7, 115, -104, 113, 12, -26, 0, 15, -19, 16, 14, -12, -128, 14, 51, 12, 66, 30, -62, -63, 29, -50, -95, 28, 102, 48, 5, 61, -120, 67, 56, -124, -125, 27, -52, 3, 61, -56, 67, 61, -116, 3, 61, -52, 120, -116, 116, 112, 7, 123, 8, 7, 121, 72, -121, 112, 112, 7, 122, 112, 3, 118, 120, -121, 112, 32, 7, 0, 0, 0, 113, 32, 0, 0, 16, 0, 0, 0, 38, 64, 68, -114, 51, -39, 64, 26, -4, 115, -83, 71, -110, 9, 76, 17, 114, -103, -44, 50, 33, -49, -126, -91, 100, 109, 71, -46, -49, 0, 83, -124, 92, -8, -123, 119, 21, -2, 23, 22, -96, 24, 109, 4, 52, -46, 2, 76, -124, 1, 64, 70, 27, 1, -115, 84, 56, 17, 99, 2, 83, -124, 92, 0, 97, 32, 0, 0, 56, 0, 0, 0, 19, 4, 65, 44, 16, 0, 0, 0, 8, 0, 0, 0, 84, 102, 0, 8, -51, 0, -48, 26, 1, 40, -125, 34, -104, 1, 32, 58, 7, 1, 25, -46, 68, 115, -84, 1, 8, 6, 114, 51, 0, 0, 0, 0, -108, -116, 49, -124, 11, 58, 12, -44, 28, -125, -107, 65, 99, 8, -105, 113, 27, -88, 57, 6, -115, 51, -58, 16, 46, -23, 60, 80, 115, 12, -35, 39, -115, 33, 92, -47, -123, 1, -88, 57, 6, 48, 16, -125, 104, -60, -96, 24, -126, 1, 24, -125, 49, 4, 50, -128, -82, 12, -56, -52, 49, 56, 102, 0, -115, 33, -112, -127, 113, 104, 64, 102, -114, -31, 12, -46, -64, 24, 67, 32, -125, -24, -42, -128, -52, 28, -125, 26, -80, 65, 68, -63, -88, 54, 112, 3, 24, 100, 120, 3, -89, 26, 100, -128, -125, -121, 58, -59, -20, 96, -124, 28, -60, -63, 0, 96, 56, 16, 0, 0, 7, 0, 0, 0, -74, 112, 80, 82, -44, 1, 19, 96, 12, -63, 101, 13, 1, 102, 9, 68, -11, 35, -115, 41, 20, -43, -17, 80, 19, 0, 0, 0, 1, 49, 0, 0, 4, 0, 0, 0, 91, 6, 32, -80, -74, 12, 87, 96, 109, 25, -72, -64, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                        uchar4to4 = new byte[] { -34, -64, 23, 11, 0, 0, 0, 0, 44, 0, 0, 0, 48, 5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 64, 4, 0, 109, 7, 0, 0, 2, 64, 4, 0, 3, 0, 0, 0, 66, 67, -64, -34, 33, 12, 0, 0, 73, 1, 0, 0, 1, 16, 0, 0, 18, 0, 0, 0, 7, -127, 35, -111, 65, -56, 4, 73, 6, 16, 50, 57, -110, 1, -124, 12, 37, 5, 8, 25, 30, 4, -117, 98, -128, 20, 69, 2, 66, -110, 11, 66, -92, 16, 50, 20, 56, 8, 24, 73, 10, 50, 68, 36, 72, 10, -112, 33, 35, -60, 82, -128, 12, 25, 33, 114, 36, 7, -56, 72, 17, 98, -88, -96, -88, 64, -58, -16, 1, 0, 0, 0, 73, 24, 0, 0, 11, 0, 0, 0, 11, -112, 0, 4, 65, 16, 4, 9, 1, 4, 65, 16, 4, -119, 1, 4, 65, 16, 4, -119, -1, -1, -1, -1, 31, -64, 96, -127, -16, -1, -1, -1, -1, 3, -80, 64, -8, -1, -1, -1, -1, 1, 12, 0, -119, 32, 0, 0, 23, 0, 0, 0, 50, 34, 72, 9, 32, 100, -123, 4, -109, 34, -92, -124, 4, -109, 34, -29, -124, -95, -112, 20, 18, 76, -118, -116, 11, -124, -92, 76, 16, 68, 51, 0, 9, 1, -82, -110, -90, -120, 18, 38, 63, -110, 126, 6, -104, 34, -28, -62, 47, -36, -73, 81, 16, 72, -52, 17, 32, -61, 8, 4, 65, 101, 4, -128, -56, 28, 1, 24, 20, -29, 24, -125, 82, 34, 53, -116, 64, 0, 101, 96, -125, 81, 27, 8, -104, 35, 0, 5, 0, 0, 0, 0, 19, -80, 112, -112, -121, 118, -80, -121, 59, 104, 3, 119, 120, 7, 119, 40, -121, 54, 96, -121, 116, 112, -121, 122, -64, -121, 54, 56, 7, 119, -88, -121, 114, 8, 7, 113, 72, -121, 13, 100, 80, 14, 109, 0, 15, 122, 48, 7, 114, -96, 7, 115, 32, 7, 109, -112, 14, 118, 64, 7, 122, 96, 7, 116, -48, 6, -10, 16, 7, 114, -128, 7, 122, 96, 7, 116, -96, 7, 113, 32, 7, 120, -48, 6, -18, 48, 7, 114, -48, 6, -77, 96, 7, 116, -96, -13, 64, -122, 4, 50, 66, 68, 4, -32, 36, 56, -51, -64, -121, 40, 11, 0, 0, 1, 0, 0, 0, 48, 68, 113, -128, 0, 16, 0, 0, 0, -128, 44, 16, 0, 0, 0, 8, 0, 0, 0, 50, 30, -104, 16, 25, 17, 76, -112, -116, 9, 38, 71, -58, 4, 67, -126, 35, 0, 84, 70, 0, 40, -107, 64, 33, -112, 24, 1, 0, 0, 0, 0, 121, 24, 0, 0, -126, 0, 0, 0, 67, -116, -60, 120, -126, -28, 88, -96, -36, -61, 56, -96, 67, 56, -56, -61, 47, -52, 67, 58, -24, 67, 57, 12, 49, 18, -29, 25, -110, 99, 65, -45, 14, -23, -32, 14, -65, 80, 14, -18, 80, 15, -19, -16, 11, -13, -112, 14, -6, 80, 14, 67, -124, -89, 88, 32, -115, 3, 59, -124, -125, 59, -100, 3, 24, -40, 67, 57, -56, -61, 60, -92, -61, 59, -72, 3, 24, -52, -127, 27, -44, 1, 24, 12, 33, -98, -29, 65, 22, 28, -10, 80, 14, -14, 48, 15, -23, -16, 14, -18, -80, 32, -120, -125, 33, -60, -93, 60, -53, -126, 72, 29, -62, -63, 30, -62, -31, 23, -32, 33, 28, -58, 97, 29, -62, -31, 28, -54, -31, 23, -36, 33, 28, -38, -95, 28, 22, 88, -29, -16, 14, -19, -32, 6, -21, -16, 14, -11, 48, 15, -24, -112, 14, -21, 64, 14, -11, 64, 15, -12, 16, 14, 110, 96, 15, -7, 48, 15, -17, 32, 15, 67, -120, -89, 121, -100, 5, -48, 57, -48, -126, 60, -124, -125, 59, -52, -125, 57, -68, -125, 60, -76, 67, 43, -124, 3, 61, -56, 67, 58, -32, -61, 2, 33, 14, -18, 96, 8, -15, 64, 79, -76, 64, 57, 7, 90, -112, -121, 112, 112, -121, 121, 96, -121, 112, -96, -121, 114, 88, 96, -44, -61, 56, -96, 67, 56, -56, 3, 29, 12, 17, -98, 105, 1, 33, 15, -17, -16, 14, -12, 48, 68, 120, -86, 5, -62, 28, -60, -63, 16, -29, -71, -98, 11, 34, -122, 24, 15, -10, 100, 16, -79, -32, 121, -121, 118, 112, -121, 116, -128, -121, 119, -96, -121, 114, 112, 7, 122, 0, -125, 113, 64, -121, 112, -112, -121, 33, -62, -93, 45, -120, 102, 33, 29, -38, 1, 30, -40, -95, 28, -64, 96, 20, -34, 96, 20, -42, 96, 13, -64, -128, 22, 68, 33, 20, 66, 97, 68, -60, 14, -20, 96, 15, -19, -32, 6, -19, -16, 14, -28, 80, 15, -20, 80, 14, 110, 96, 14, -20, 16, 14, -25, 48, 15, 83, 4, 64, 24, -95, -80, 3, 59, -40, 67, 59, -72, 65, 58, -112, 67, 57, -72, 3, 61, 76, 9, -120, 17, -57, 24, -64, -125, 60, -124, -61, 57, -76, 67, 56, 76, 17, -116, 100, -124, 51, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -10, 16, 14, -14, 48, 69, 96, -98, 17, -48, 24, -56, -61, 60, -4, -62, 59, -120, -125, 58, -108, -61, 56, -48, -61, 47, -52, 3, 59, -68, 3, 61, -52, -61, 20, 96, -60, 53, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -26, -16, 14, -14, 80, 14, -31, 48, 14, -24, -16, 11, -18, 16, 14, -19, 80, 14, 83, 2, 105, -124, 52, 6, -14, 48, 15, -65, 80, 14, -8, 0, 15, -17, 32, 15, -12, -16, 11, -26, -16, 14, -14, 80, 14, -31, 48, 14, -24, 48, 37, -96, 0, 0, 0, 121, 24, 0, 0, 23, 0, 0, 0, 51, 8, -128, 28, -60, -31, 28, 102, 20, 1, 61, -120, 67, 56, -124, -61, -116, 66, -128, 7, 121, 120, 7, 115, -104, 113, 12, -26, 0, 15, -19, 16, 14, -12, -128, 14, 51, 12, 66, 30, -62, -63, 29, -50, -95, 28, 102, 48, 5, 61, -120, 67, 56, -124, -125, 27, -52, 3, 61, -56, 67, 61, -116, 3, 61, -52, 120, -116, 116, 112, 7, 123, 8, 7, 121, 72, -121, 112, 112, 7, 122, 112, 3, 118, 120, -121, 112, 32, 7, 0, 0, 0, 113, 32, 0, 0, 16, 0, 0, 0, 38, 64, 68, -114, 51, -39, 64, 26, -4, 115, -83, 71, -110, 9, 76, 17, 114, -103, -44, 50, 33, -49, -126, -91, 100, 109, 71, -46, -49, 0, 83, -124, 92, -8, -123, 119, 21, -2, 23, 22, -96, 24, 109, 4, 52, -46, 2, 76, -124, 1, 64, 70, 27, 1, -115, 84, 56, 17, 99, 2, 83, -124, 92, 0, 97, 32, 0, 0, 51, 0, 0, 0, 19, 4, 65, 44, 16, 0, 0, 0, 4, 0, 0, 0, 84, 102, 0, 40, -115, 0, 20, 65, 25, 16, -101, 1, 0, 0, 0, 0, -108, -116, 49, -124, -23, 57, 10, -44, 28, -125, 84, 61, 99, 8, -109, 113, 23, -88, 57, 6, 11, 51, -58, 16, 38, -24, 52, 80, 115, 12, -39, 6, -115, 33, 76, -47, 117, -96, -26, 24, 56, 47, 26, 49, 40, -122, 96, 0, -66, 49, 4, 48, 120, 46, 12, -56, -52, 49, 56, 98, -16, -116, 33, -128, -127, 113, 100, 64, 102, -114, 97, 12, -54, -64, 24, 67, 0, 3, -24, -50, -128, -52, 28, -125, 25, -96, 1, 52, -122, 0, 6, -47, -87, 1, -103, 57, -122, 52, 88, -125, -120, -126, 81, 108, -48, 6, 48, 24, -95, -72, -63, 0, 96, 56, 16, 0, 7, 0, 0, 0, -74, 112, 80, 82, -44, 1, 19, 96, 12, -63, 101, 13, 1, 102, 9, 68, -11, 35, -115, 41, 20, -43, -17, 80, 19, 0, 0, 0, 1, 49, 0, 0, 4, 0, 0, 0, 91, 6, 32, -80, -74, 12, 90, 96, 109, 25, -72, -64, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                        byteCodes = new byte[][] { YuvConverter.uchar4to1, YuvConverter.uchar4to2, YuvConverter.uchar4to3, YuvConverter.uchar4to4 };
                        YuvConverter.TMP = "/data/local/tmp";
                        return;
                    }
                    catch (Exception ex) {
                        throw new AssertionError((Object)ex);
                    }
                }
                create = RenderScript.class.getDeclaredMethod("create", Context.class, Integer.TYPE, RenderScript$ContextType.class, Integer.TYPE);
                continue;
            }
        }
    }
    
    private YuvConverter(final RenderScript rs, final ScriptC_uchar4ToX s) {
        this.rs = rs;
        this.s = s;
    }
    
    private static RenderScript create() {
        RenderScript renderScript;
        try {
            if (Build$VERSION.SDK_INT < 18) {
                renderScript = (RenderScript)YuvConverter.create.invoke(null, YuvConverter.context, 16);
            }
            else if (Build$VERSION.SDK_INT < 21) {
                renderScript = (RenderScript)YuvConverter.create.invoke(null, YuvConverter.context, 16, RenderScript$ContextType.NORMAL);
            }
            else {
                renderScript = (RenderScript)YuvConverter.create.invoke(null, YuvConverter.context, 16, RenderScript$ContextType.NORMAL, 0);
            }
        }
        catch (Exception ex) {
            throw new AssertionError((Object)ex);
        }
        return renderScript;
    }
    
    public static YuvConverter createUConverter() {
        final RenderScript create = create();
        final ScriptC_uchar4ToX get4To1 = get4To1(create);
        get4To1.set_gTransformMatrix(new Matrix4f(new float[] { -0.169f, 0.5f, 0.299f, 0.0f, -0.331f, -0.419f, 0.587f, 0.0f, 0.5f, -0.081f, 0.114f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f }));
        get4To1.set_gTranslate(new Short4((short)128, (short)128, (short)0, (short)0));
        return new YuvConverter(create, get4To1);
    }
    
    public static YuvConverter createUVConverter() {
        final RenderScript create = create();
        final ScriptC_uchar4ToX get4To2 = get4To2(create);
        get4To2.set_gTransformMatrix(new Matrix4f(new float[] { -0.169f, 0.5f, 0.299f, 0.0f, -0.331f, -0.419f, 0.587f, 0.0f, 0.5f, -0.081f, 0.114f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f }));
        get4To2.set_gTranslate(new Short4((short)128, (short)128, (short)0, (short)0));
        return new YuvConverter(create, get4To2);
    }
    
    public static YuvConverter createVConverter() {
        final RenderScript create = create();
        final ScriptC_uchar4ToX get4To1 = get4To1(create);
        get4To1.set_gTransformMatrix(new Matrix4f(new float[] { 0.5f, -0.169f, 0.299f, 0.0f, -0.419f, -0.331f, 0.587f, 0.0f, -0.081f, 0.5f, 0.114f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f }));
        get4To1.set_gTranslate(new Short4((short)128, (short)128, (short)0, (short)0));
        return new YuvConverter(create, get4To1);
    }
    
    public static YuvConverter createVUConverter() {
        final RenderScript create = create();
        final ScriptC_uchar4ToX get4To2 = get4To2(create);
        get4To2.set_gTransformMatrix(new Matrix4f(new float[] { 0.5f, -0.169f, 0.299f, 0.0f, -0.419f, -0.331f, 0.587f, 0.0f, -0.081f, 0.5f, 0.114f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f }));
        get4To2.set_gTranslate(new Short4((short)128, (short)128, (short)0, (short)0));
        return new YuvConverter(create, get4To2);
    }
    
    public static YuvConverter createYPlaneConverter() {
        final RenderScript create = create();
        final ScriptC_uchar4ToX get4To1 = get4To1(create);
        get4To1.set_gTransformMatrix(new Matrix4f(new float[] { 0.299f, -0.169f, 0.5f, 0.0f, 0.587f, -0.331f, -0.419f, 0.0f, 0.114f, 0.5f, -0.081f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f }));
        get4To1.set_gTranslate(new Short4((short)0, (short)0, (short)0, (short)0));
        return new YuvConverter(create, get4To1);
    }
    
    private static ScriptC_uchar4ToX get4To1(final RenderScript renderScript) {
        return new ScriptC_uchar4ToX(renderScript, "uchar4to1", Element.U8(renderScript), getBytes(2131165184), YuvConverter.TMP);
    }
    
    private static ScriptC_uchar4ToX get4To2(final RenderScript renderScript) {
        return new ScriptC_uchar4ToX(renderScript, "uchar4to2", Element.U8_2(renderScript), getBytes(2131165185), YuvConverter.TMP);
    }
    
    private static ScriptC_uchar4ToX get4To3(final RenderScript renderScript) {
        return new ScriptC_uchar4ToX(renderScript, "uchar4to3", Element.U8_3(renderScript), getBytes(2131165186), YuvConverter.TMP);
    }
    
    private static ScriptC_uchar4ToX get4To4(final RenderScript renderScript) {
        return new ScriptC_uchar4ToX(renderScript, "uchar4to4", Element.U8_4(renderScript), getBytes(2131165187), YuvConverter.TMP);
    }
    
    public static byte[] getBytes(final int n) {
        byte[] array = null;
        if (YuvConverter.context == null) {
            switch (n) {
                default: {
                    throw new AssertionError((Object)"bytecode not found");
                }
                case 2131165184: {
                    array = YuvConverter.uchar4to1;
                    break;
                }
                case 2131165185: {
                    array = YuvConverter.uchar4to2;
                    break;
                }
                case 2131165186: {
                    array = YuvConverter.uchar4to3;
                    break;
                }
                case 2131165187: {
                    array = YuvConverter.uchar4to4;
                    break;
                }
            }
        }
        else {
            try {
                array = StreamUtility.readToEndAsArray(YuvConverter.context.getResources().openRawResource(n));
            }
            catch (Exception ex) {
                throw new AssertionError((Object)ex);
            }
        }
        return array;
    }
    
    private static Bitmap getPlane(final Bitmap bitmap, final int n, final int n2, final float[] array) {
        final ColorMatrix rgbToYuvColorMatrix = getRgbToYuvColorMatrix();
        rgbToYuvColorMatrix.postConcat(new ColorMatrix(array));
        final Paint paint = new Paint();
        paint.setXfermode((Xfermode)new PorterDuffXfermode(PorterDuff$Mode.SRC));
        paint.setColorFilter((ColorFilter)new ColorMatrixColorFilter(rgbToYuvColorMatrix));
        final Bitmap bitmap2 = Bitmap.createBitmap(n, n2, Bitmap$Config.ALPHA_8);
        final Canvas canvas = new Canvas(bitmap2);
        if (n == bitmap.getWidth() && n2 == bitmap.getHeight()) {
            canvas.drawBitmap(bitmap, 0.0f, 0.0f, paint);
        }
        else {
            canvas.drawBitmap(bitmap, new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight()), new Rect(0, 0, n, n2), paint);
        }
        return bitmap2;
    }
    
    public static ColorMatrix getRgbToYuvColorMatrix() {
        return new ColorMatrix(new float[] { 0.299f, 0.587f, 0.114f, 0.0f, 0.0f, -0.169f, -0.331f, 0.5f, 0.0f, 128.0f, 0.5f, -0.419f, -0.081f, 0.0f, 128.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f });
    }
    
    public static Bitmap getYPlane(final Bitmap bitmap, final int n, final int n2) {
        return getPlane(bitmap, n, n2, new float[] { 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f });
    }
    
    public static void getYPlane(final Bitmap bitmap, final ByteBuffer byteBuffer) {
        getYPlane(bitmap, bitmap.getWidth(), bitmap.getHeight()).copyPixelsToBuffer((Buffer)byteBuffer);
    }
    
    public static void printBytes() throws Exception {
        final DataOutputStream dataOutputStream = new DataOutputStream(new FileOutputStream("/sdcard/bytes.txt"));
        for (int i = 0; i < YuvConverter.resources.length; ++i) {
            dataOutputStream.writeBytes("final static byte[] uchar4to" + (i + 1) + " = new byte[] {\n");
            dataOutputStream.writeBytes(Arrays.toString(getBytes(YuvConverter.resources[i])).replace("[", "").replace("]", ""));
            dataOutputStream.writeBytes("};\n\n");
        }
        dataOutputStream.close();
    }
    
    public int convert(Bitmap bitmap, final ByteBuffer byteBuffer) {
        int n = 1;
        if (4 * bitmap.getWidth() != bitmap.getRowBytes()) {
            final Bitmap bitmap2 = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap$Config.ARGB_8888);
            new Canvas(bitmap2).drawBitmap(bitmap, 0.0f, 0.0f, (Paint)null);
            bitmap = bitmap2;
        }
        final Allocation fromBitmap = Allocation.createFromBitmap(this.rs, bitmap, Allocation$MipmapControl.MIPMAP_NONE, n);
        final Allocation typed = Allocation.createTyped(this.rs, new Type$Builder(this.rs, this.s.getTo()).setX(bitmap.getWidth()).setY(bitmap.getHeight()).create());
        this.s.forEach_root(fromBitmap, typed);
        if (!byteBuffer.isDirect() && byteBuffer.arrayOffset() == 0 && byteBuffer.position() == 0) {
            n = 0;
        }
        byte[] array;
        if (n != 0) {
            if (this.temp == null || this.temp.length < typed.getBytesSize()) {
                this.temp = new byte[typed.getBytesSize()];
            }
            array = this.temp;
        }
        else {
            array = byteBuffer.array();
        }
        typed.copyTo(array);
        if (n != 0) {
            byteBuffer.put(array);
        }
        else {
            byteBuffer.position(byteBuffer.position() + typed.getBytesSize());
        }
        this.s.forEach_root(fromBitmap, typed);
        return typed.getBytesSize();
    }
}
