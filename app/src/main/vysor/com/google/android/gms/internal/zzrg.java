// 
// Decompiled by Procyon v0.5.30
// 

package com.google.android.gms.internal;

import com.google.android.gms.common.api.TransformedResult;
import android.support.annotation.NonNull;
import com.google.android.gms.common.api.ResultTransform;
import com.google.android.gms.common.api.ResultCallback;
import java.util.concurrent.TimeUnit;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.Result;

public final class zzrg<R extends Result> extends OptionalPendingResult<R>
{
    private final zzqe<R> zi;
    
    public zzrg(final PendingResult<R> pendingResult) {
        if (!(pendingResult instanceof zzqe)) {
            throw new IllegalArgumentException("OptionalPendingResult can only wrap PendingResults generated by an API call.");
        }
        this.zi = (zzqe<R>)pendingResult;
    }
    
    @Override
    public R await() {
        return this.zi.await();
    }
    
    @Override
    public R await(final long n, final TimeUnit timeUnit) {
        return this.zi.await(n, timeUnit);
    }
    
    @Override
    public void cancel() {
        this.zi.cancel();
    }
    
    @Override
    public R get() {
        if (this.isDone()) {
            return this.await(0L, TimeUnit.MILLISECONDS);
        }
        throw new IllegalStateException("Result is not available. Check that isDone() returns true before calling get().");
    }
    
    @Override
    public boolean isCanceled() {
        return this.zi.isCanceled();
    }
    
    @Override
    public boolean isDone() {
        return this.zi.isReady();
    }
    
    @Override
    public void setResultCallback(final ResultCallback<? super R> resultCallback) {
        this.zi.setResultCallback(resultCallback);
    }
    
    @Override
    public void setResultCallback(final ResultCallback<? super R> resultCallback, final long n, final TimeUnit timeUnit) {
        this.zi.setResultCallback(resultCallback, n, timeUnit);
    }
    
    @NonNull
    @Override
    public <S extends Result> TransformedResult<S> then(@NonNull final ResultTransform<? super R, ? extends S> resultTransform) {
        return this.zi.then(resultTransform);
    }
    
    @Override
    public void zza(final zza zza) {
        this.zi.zza(zza);
    }
    
    @Override
    public Integer zzaqf() {
        return this.zi.zzaqf();
    }
}
